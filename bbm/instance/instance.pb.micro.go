// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bbm/instance/instance.proto

package instance

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Instance service

func NewInstanceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Instance service

type InstanceService interface {
	InstanceDetail(ctx context.Context, in *InstanceDetailRequest, opts ...client.CallOption) (*InstanceDetailResponse, error)
}

type instanceService struct {
	c    client.Client
	name string
}

func NewInstanceService(name string, c client.Client) InstanceService {
	return &instanceService{
		c:    c,
		name: name,
	}
}

func (c *instanceService) InstanceDetail(ctx context.Context, in *InstanceDetailRequest, opts ...client.CallOption) (*InstanceDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Instance.InstanceDetail", in)
	out := new(InstanceDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Instance service

type InstanceHandler interface {
	InstanceDetail(context.Context, *InstanceDetailRequest, *InstanceDetailResponse) error
}

func RegisterInstanceHandler(s server.Server, hdlr InstanceHandler, opts ...server.HandlerOption) error {
	type instance interface {
		InstanceDetail(ctx context.Context, in *InstanceDetailRequest, out *InstanceDetailResponse) error
	}
	type Instance struct {
		instance
	}
	h := &instanceHandler{hdlr}
	return s.Handle(s.NewHandler(&Instance{h}, opts...))
}

type instanceHandler struct {
	InstanceHandler
}

func (h *instanceHandler) InstanceDetail(ctx context.Context, in *InstanceDetailRequest, out *InstanceDetailResponse) error {
	return h.InstanceHandler.InstanceDetail(ctx, in, out)
}
